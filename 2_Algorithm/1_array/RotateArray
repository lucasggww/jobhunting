Write a function roate(a[], n, d) that roates arr[] of size n by d elements.

1. Method 1, use a temp array, save elements from 0-d, then shift the array d, append the temp array to the end of array.
    Time O(N), Auxiliary Space O(d)
2. Method 2, rotate the element one by one. O(N*d), Auxilary Space Complexity (1)
    So it depends on how long the array is and how large the d is.
    So we preper method 1.
3. Method 3. Reversal method, reverse 0 to d-1, reverse d to n-1,
C/C++:

void leftRotate(int arr[], int n, int d) {
    int i = 0;
    for (i = 0; i < d ;i ++)
        leftRotateOne(arr, n);
}

void leftRotateOne(int arr[], int n) {
    int i, temp;

    temp = arr[0];
    for (i = 0; i < n - 1; i ++) {
        arr[i] = arr[i + 1];
    }
    arr[n - 1] = temp;
}

int main() {
    int arr[] = {1,2,3,4,5,6,7};
    leftRotate(arr, 7, 2);
    return 0;
}

void leftRotate(int arr[], int l, int r) {
    while (l < r) {
        int temp = arr[l];
        arr[l] = arr[r];
        arr[r] = temp;
        l ++;
        r --;
    }
}

leftRotate(arr, 0, d);
leftRotate(arr, d + 1, n - 1);
leftRotate(arr, 0, n - 1);
